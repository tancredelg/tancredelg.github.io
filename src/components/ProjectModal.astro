---
import type { ProjectProps } from '../data/projects.ts';

// Technology name to image asset mapping (same as ProjectCard)
const techIconMap: Record<string, string> = {
    'python': '/src/assets/python-logo-only-cropped.png',
    'java': '/src/assets/java-logo-small.svg',
    'c++': '/src/assets/c++-logo.svg',
    'javascript': '/src/assets/js-logo.svg',
    'unreal-engine': '/src/assets/unreal-engine-logo.svg',
    'unity': '/src/assets/unity-logo.svg',
    'flask': '/src/assets/flask-logo-cropped.png',
    'sqlite': '/src/assets/sqlite-logo.svg',
    'tailwindcss': '/src/assets/tailwindcss-mark.d52e9897.svg',
    'apache-zookeeper': '/src/assets/apache-zookeeper-logo.png',
    'opencv': '/src/assets/opencv-logo.webp',
    'moderngl': '/src/assets/moderngl-logo.png',
};

const { project, index } = Astro.props;

// const {
//     title,
//     description,
//     fromDate,
//     toDate,
//     categories = [],
//     technologies = [],
//     repoUrl,
//     liveUrl,
//     media = [],
// } = project as ProjectProps;
---

<div id={`project-modal-${index}`} class="project-modal hidden">
    <div>
        <!-- <button class="project-modal-close absolute top-3 right-3 text-3xl text-gray-400 hover:text-gray-100 cursor-pointer hover:scale-110 transition-all duration-200 ease-out">&times;</button> -->
        <h5 class="text-4xl font-semibold mb-2">{project.title}</h5>
        <div class="text-stone-500 mb-2">
            {project.fromDate}{project.toDate ? ` â€“ ${project.toDate}` : ''}
        </div>
        {project.media && project.media.length > 0 && (
            <div class="media-carousel">
                <div class="carousel-container">
                    <div class="carousel-track">
                        {project.media.map((item: any, mediaIndex: number) => (
                            <div class="carousel-slide">
                                {item.type === 'image' ? (
                                    <img src={item.src} alt={item.alt || project.title} />
                                ) : (
                                    <video src={item.src} controls />
                                )}
                            </div>
                        ))}
                    </div>
                </div>
                {project.media.length > 1 && (
                    <div class="carousel-nav">
                        <button class="carousel-prev">&lt;</button>
                        <div class="carousel-indicators">
                            {project.media.map((_: any, indicatorIndex: number) => (
                                <button class="indicator" data-index={indicatorIndex}></button>
                            ))}
                        </div>
                        <button class="carousel-next">&gt;</button>
                    </div>
                )}
            </div>
        )}
        <p class="my-2 text-sm overflow-y-auto max-h-40">{project.description}</p>
        <div class="flex flex-wrap gap-2 my-2">
            {project.categories.map((cat: string) => (
                <span class="text-xs bg-purple-900/40 text-purple-200 px-2 py-1 rounded-full">{cat}</span>
            ))}
            {project.technologies.map((tech: string) => {
                const iconSrc = techIconMap[tech];
                return iconSrc ? (
                    <img 
                        src={iconSrc} 
                        alt={tech} 
                        title={tech}
                        class="h-6 w-6 object-contain bg-white/10 rounded p-0.5 backdrop-blur-sm"
                    />
                ) : (
                    <span class="text-xs bg-blue-900/50 text-blue-300 px-2 py-1 rounded-full">{tech}</span>
                );
            })}
        </div>
        <div class="flex gap-4 my-2">
            {project.liveUrl && <a href={project.liveUrl} target="_blank" class="hover:underline">Live Demo</a>}
            {project.repoUrl && <a href={project.repoUrl} target="_blank" class="hover:underline">Source Code</a>}
        </div>
    </div>
</div>

<script define:vars={{ modalId: `project-modal-${index}`, mediaCount: project.media?.length || 0 }}>
    if (mediaCount > 1) {
        const modal = document.getElementById(modalId);
        const track = modal.querySelector('.carousel-track');
        const prevBtn = modal.querySelector('.carousel-prev');
        const nextBtn = modal.querySelector('.carousel-next');
        const indicators = modal.querySelectorAll('.indicator');
        
        let currentSlide = 0;
        
        function updateCarousel() {
            track.style.transform = `translateX(-${currentSlide * 100}%)`;
            
            // Update indicators
            indicators.forEach((indicator, index) => {
                indicator.classList.toggle('current', index === currentSlide);
            });
        }
        
        function nextSlide() {
            currentSlide = (currentSlide + 1) % mediaCount;
            updateCarousel();
        }
        
        function prevSlide() {
            currentSlide = (currentSlide - 1 + mediaCount) % mediaCount;
            updateCarousel();
        }
        
        function goToSlide(index) {
            currentSlide = index;
            updateCarousel();
        }
        
        // Event listeners
        nextBtn.addEventListener('click', nextSlide);
        prevBtn.addEventListener('click', prevSlide);
        
        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => goToSlide(index));
        });
        
        // Keyboard navigation
        modal.addEventListener('keydown', (e) => {
            if (e.key === 'ArrowLeft') prevSlide();
            if (e.key === 'ArrowRight') nextSlide();
        });
        
        // Initialize
        updateCarousel();
    }
</script>